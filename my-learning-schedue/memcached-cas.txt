Memcached CAS协议(Campare and set 比较并设置) 本文基于memcached 1.4.15
基本原理:
    基本原理非常简单，简而言之就是"版本号"。每个存储的数据对象都有一个版本号。 在Memcached中，每个key关联有一个64位的long型唯一数值，表示该key对应
    value的版本号。

    这个数值是由memcached产生， 从1开始，且同一Memcached不会重复， 在两种情况下，这个版本号会增加，即新增与更新， 而删除item版本值不会减小。

    未使用cas协议

        A取出数据对象x保存至本地
        B取出数据对象x保存至本地
        B修改x为数据对象y,并将其放入缓存
        A修改x为数据对象z,并将其放入缓存
        B想取回对象,发现不是y而是z,此处会发生数据写入冲突.

    使用cas协议

        A取出数据对象x,并获取到CAS-ID
        B取出数据对象x,并获取到CAS-ID
        B修改数据对象y,在写入缓存前,发现CAS-ID与缓存空间中该数据的CAS-ID是一致,就将修改后的带有CAS-ID2的y写入到缓存.
        A修改数据对象z,在写入缓存前,发现CAS-ID与缓存空间中该数据的CAS-ID2不一致,则拒绝写入,返回存储失败
        参见 : http://www.pigg.co/memcached-cas-detail.html


    PHP的Memcached:
    1) Memcached::get( string $key [, callback $cache_cb [, float &$cas_token ]] ):
        参数$key就比较熟悉， 就是item对应的键值。
        参数$cache_cb: 指定一个回调函数， 用于获取item时候做额外的处理， 比如获取了memcached的item，然后需要从数据库查询相关的记录。
        eg:   $item = Memcached::get('userID:' . $uid, 'getUserInfo', $cas);
        function getUserInfo($memc, $key, &$value)
        {
            $user_id = substr($key, 5);
            /* 从数据库读取个人信息 */
            /* ... */
            $profile_info = array(/****/);
            $value = $profile_info;
            return true;
        }
        参见 : http://php.net/manual/zh/memcached.callbacks.read-through.php
        其中第三个参数如果给定， 在get()执行后， 会将memcached中给定$key相应的CAS值存储在第三个参数中。
    2) Memcached::add( string $key , mixed $value [, int $expiration ] )
        向一个新的key下面增加一个元素
        功能类似于set()，但是假设给定的$key已经有元素， 则操作会失败。
        成功时返回 TRUE， 或者在失败时返回 FALSE。 如果key已经存在， Memcached::getResultCode()方法将会返回Memcached::RES_NOTSTORED。 

    3) Memcached::getResultCode()
        返回最后一次操作的结果代码
        00 = MEMCACHED_SUCCESS
        01 = MEMCACHED_FAILURE
        02 = MEMCACHED_HOST_LOOKUP_FAILURE // getaddrinfo() and getnameinfo() only
        03 = MEMCACHED_CONNECTION_FAILURE
        04 = MEMCACHED_CONNECTION_BIND_FAILURE // DEPRECATED see MEMCACHED_HOST_LOOKUP_FAILURE
        05 = MEMCACHED_WRITE_FAILURE
        06 = MEMCACHED_READ_FAILURE
        07 = MEMCACHED_UNKNOWN_READ_FAILURE
        08 = MEMCACHED_PROTOCOL_ERROR
        09 = MEMCACHED_CLIENT_ERROR
        10 = MEMCACHED_SERVER_ERROR // Server returns "SERVER_ERROR"
        11 = MEMCACHED_ERROR // Server returns "ERROR"
        12 = MEMCACHED_DATA_EXISTS
        13 = MEMCACHED_DATA_DOES_NOT_EXIST
        14 = MEMCACHED_NOTSTORED
        15 = MEMCACHED_STORED
        16 = MEMCACHED_NOTFOUND
        17 = MEMCACHED_MEMORY_ALLOCATION_FAILURE
        18 = MEMCACHED_PARTIAL_READ
        19 = MEMCACHED_SOME_ERRORS
        20 = MEMCACHED_NO_SERVERS
        21 = MEMCACHED_END
        22 = MEMCACHED_DELETED
        23 = MEMCACHED_VALUE
        24 = MEMCACHED_STAT
        25 = MEMCACHED_ITEM
        26 = MEMCACHED_ERRNO
        27 = MEMCACHED_FAIL_UNIX_SOCKET // DEPRECATED
        28 = MEMCACHED_NOT_SUPPORTED
        29 = MEMCACHED_NO_KEY_PROVIDED /* Deprecated. Use MEMCACHED_BAD_KEY_PROVIDED! */
        30 = MEMCACHED_FETCH_NOTFINISHED
        31 = MEMCACHED_TIMEOUT
        32 = MEMCACHED_BUFFERED
        33 = MEMCACHED_BAD_KEY_PROVIDED
        34 = MEMCACHED_INVALID_HOST_PROTOCOL
        35 = MEMCACHED_SERVER_MARKED_DEAD
        36 = MEMCACHED_UNKNOWN_STAT_KEY
        37 = MEMCACHED_E2BIG
        38 = MEMCACHED_INVALID_ARGUMENTS
        39 = MEMCACHED_KEY_TOO_BIG
        40 = MEMCACHED_AUTH_PROBLEM
        41 = MEMCACHED_AUTH_FAILURE
        42 = MEMCACHED_AUTH_CONTINUE
        43 = MEMCACHED_PARSE_ERROR
        44 = MEMCACHED_PARSE_USER_ERROR
        45 = MEMCACHED_DEPRECATED
        46 = MEMCACHED_IN_PROGRESS
        47 = MEMCACHED_SERVER_TEMPORARILY_DISABLED
        48 = MEMCACHED_SERVER_MEMORY_ALLOCATION_FAILURE
        49 = MEMCACHED_MAXIMUM_RETURN /* Always add new error code before */
        11 = MEMCACHED_CONNECTION_SOCKET_CREATE_FAILURE = MEMCACHED_ERROR

    4) Memcached::cas( float $cas_token , string $key , mixed $value [, int $expiration ] )
        比较并交换值
        <?php
        $m = new Memcached();
        $m->addServer('localhost', 11211);

        do {
            /* 获取ip列表以及它的标记 */
            $ips = $m->get('ip_block', null, $cas);   // 使用$cas来存储先前memcached中ip_block相应的CAS值
            /* 如果列表不存在， 创建并进行一个原子添加（如果其他客户端已经添加， 这里就返回false）*/
            if ($m->getResultCode() == Memcached::RES_NOTFOUND) { // get没有找到相应项
                $ips = array($_SERVER['REMOTE_ADDR']);
                $m->add('ip_block', $ips);
            /* 其他情况下，添加ip到列表中， 并以cas方式去存储， 这样当其他客户端修改过， 则返回false */
            } else { 
                $ips[] = $_SERVER['REMOTE_ADDR'];
                $m->cas($cas, 'ip_block', $ips);
            }   
        } while ($m->getResultCode() != Memcached::RES_SUCCESS);
        ?>
        首先使用get()获取给定$key的项， 并同时获取CAS值。
        如果没有找到相应项， 那么尝试添加一个新的项。 否则使用cas()来检查并替换值。这样可以在多个客户端竞争同一key时，保证数据的一致性。

    上面了解了PHP的memcached相关cas方面的应用， 下面我们再具体看看memcached源码中是如何实现这些的。

    1. 首先看看memcached中的项目结构体item:
        typedef struct _stritem {
            struct _stritem *next;
            struct _stritem *prev;
            struct _stritem *h_next;    /* hash chain next */
            rel_time_t      time;       /* least recent access */
            rel_time_t      exptime;    /* expire time */
            int             nbytes;     /* size of data */
            unsigned short  refcount;
            uint8_t         nsuffix;    /* length of flags-and-length string */
            uint8_t         it_flags;   /* ITEM_* above */
            uint8_t         slabs_clsid;/* which slab class we're in */
            uint8_t         nkey;       /* key length, w/terminating null and padding */
            /* this odd type prevents type-punning issues when we do
             * the little shuffle to save space when not using CAS. */
            union {
                uint64_t cas;
                char end;
            } data[];
            /* if it_flags & ITEM_CAS we have 8 bytes CAS */
            /* then null-terminated key */
            /* then " flags length\r\n" (no terminating null) */
            /* then data with terminating \r\n (no terminating null; it's binary!) */
        } item;
        这个结构体大致上分为两部分， 前面的部分是链表的相应指针， 最近访问时间，过期时间，以及数据尺寸， 引用次数， 后缀长度，标志， 所属slab的类别ID，key长度等等，而另外一部分是CAS, key, suffix, data。而CAS是可选部分， 具体是由it_flags来决定的。
        假设it_flags是ITEM_CAS， 则CAS存在，否则不存在。 上述结构体最后使用了个空数组， 这个是C语言编程中常用的一个技巧， 空数组不占空间，且数组名就是结构体末尾的位置。 而CAS, key, suffix, data都是在结构体后面紧跟着逐一出现的。CAS刚好在key前面一点位置出现。
        key, suffix, data分别是通过ITEM_key, ITEM_suffix, ITEM_data这几个宏来获取指针位置。

        在settings_init()中， settings.use_cas = true; 默认是use_cas为true. 如果在命令行中有参数-C， 则设置为false.
        case 'C' :
            settings.use_cas = false;
            break;

    2. 下面看看settings结构体
        struct settings {
            size_t maxbytes;                // 最大内存， 默认64M，最大2G。通过-m 设定
            int maxconns;                   // 最大连接数，默认1024 通过-c设定
            int port;                       // tcp 端口号，通过-p 设置
            int udpport;                    // ucp 端口号，通过-U 设置
            char *inter;                    // 监听IP或SOCKET地址 ，通过-l设定 默认情况下,该字符串应该是用于getaddrinfo()的NULL.
            int verbose;                    // 是否输出debug信息。由-v,-vvv参数设定
            rel_time_t oldest_live;         // 时间设定，当使用flush时，只需要修改本值，当取出的值时间小于本值时，将被忽略.
            int evict_to_free;              // 当内存存满时，是否淘汰老数据。默认是是。可用-M修改为否。此时内容耗尽时，新插入数据时将返回失败。
            char *socketpath;               // socket模式，使用-s设定, path to unix socket if using local socket. by default, not using a unix socket
            int access;                     // socket文件的文件权限，使用-a设定 access mask (a la chmod) for unix domain socket
            double factor;                  // slab分配增量因子，默认围1.25， 可通过-f设定
            int chunk_size;                 // 给一个key+value+flags分配的最小字节数。 默认值为48. 可通过-n修改
            int num_threads;                // 工作线程数。默认围4， 可通过-t设定 number of worker (without dispatcher) libevent threads to run
            int num_threads_per_udp;        // /* number of worker threads serving each udp socket */
            char prefix_delimiter;          // 状态详情的key前缀 character that marks a key prefix (for stats)
            int detail_enabled;             // 开启状态详情记录 nonzero if we're collecting detailed stats
            int reqs_per_event;             // 每个event处理的请求数 Maximum number of io to process on each io-event.
            bool use_cas;                   // 是否开启cas，"cas"是一个存储检查操作。用来检查脏数据的存操作。在取出数据后，如果没有其他人修改此数据时，本进程才能够存储数据。默认为开启。需要版本：1.3+
            enum protocol binding_protocol; // 使用协议， 试过-B参数设定。 可能值为：ascii, binary, or auto， 版本： 1.4.0+
            int backlog;                    // 等待处理的排队队列长度。默认值为1024.
            int item_size_max;              // 单个item最大字计数。默认1M。可通过-I参数修改。在1.4.2版本之后，这个值可以大于1M，必须小于128M。但memcached会抛出警告，大于1M将导致整体运行内存的增加和内存性能的降低。 版本： 1.4.2+ Maximum item size, and upper end for slabs
            bool sasl;                      // 是否开启sasl SASL on/off
            bool maxconns_fast;             // /* Whether or not to early close connections */
            bool slab_reassign;             // /* Whether or not slab reassignment is allowed */
            int slab_automove;              // /* Whether or not to automatically move slabs */
            int hashpower_init;             // /* Starting hash power level */
        };
        extern struct settings settings;

        settings结构体中定义了一些列配置相关的属性， 包括最大内存，最大连接数，以及工作线程数， 是否使用cas， 单个item的最大尺寸， 最小块大小，以及块增长因子， 最大排队长度。

















































1. Cache写策略
http://www.dbaleet.org/cach_write_policy_write-through_and_write-back/
http://benjr.tw/node/682
http://witmax.cn/cache-writing-policies.html
http://en.wikipedia.org/wiki/Cache_%28computing%29#Writing_policies

2. I/O模式
http://www.cppblog.com/cxiaojia/archive/2013/06/13/198831.html
http://www.ccvita.com/503.html
http://www.ibm.com/developerworks/cn/linux/l-async/
http://www.cnblogs.com/wzd24/archive/2009/03/09/1407326.html

3. linux 网络编程书籍
http://blog.csdn.net/21aspnet/article/details/6694485

4. php函数实现原理
http://blog.csdn.net/heiyeshuwu/article/details/5840025
http://www.laruence.com/2008/08/12/164.html
http://www.php-internals.com/book/?p=chapt04/04-01-02-function-union
http://www.php-internals.com/ TIPI think in php internals