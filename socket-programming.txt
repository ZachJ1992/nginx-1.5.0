socket基本操作

1)  socket()函数
    int socket(int domain, int type, int protocol)
    socket函数对应于普通文件的打开操作。 普通文件的打开操作返回一个文件描述字，而socket()用于创建一个socket描述符(socket descriptor),它唯一标识一个socket。这个socket描述字跟文字描述字一样，后续的操作都要用到它，把它作为参数，通过它来进行一些读写操作。

    正如可以给fopen的传入不同参数值，以打开不同的文件。创建socket的时候，也可以指定不同的参数创建不同的socket描述符，socket函数的三个参数分别为:
    1) domain: 即协议域，又称协议簇(family). 常用的协议族有: AF_INET, AF_INET6, AF_LOCAL(或称AF_UNIX, uinx域socket)、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址(32位的)与端口号(16位)的组合、AF_UNIX决定了要用一个绝对路径名作为地址。

    2) type: 指定socket类型。常用的socket类型有, SOCK_STREAM, SOCK_DGRAM, SOCK_RAW, SOCK_PACKET, SOCK_SEQPACKET等等.

    3) protocol: 顾名思义，就是指定协议。常用的协议有， IPPROTO_TCP, IPPROTO_UDP, IPPROTO_SCTP, IPPROTO_TIPC等， 它们分别对应于TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。
    当我们调用socket创建一个socket时，返回的socket描述字它存在于协议族(address family, AF_XXX)空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()，否则就当调用connect(), listen()时系统会自动随机分配一个端口。

2)  bind()函数
    正如上面所说bind()函数把一个地址族中的特定地址赋给socket.例如对应AF_INET, AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket.
    int bind(int sockfd, const struct sockaddr * addr, socklen_t addrlen)
    函数的三个参数分别为:
    1) sockfd : 即socket描述字，它是通过socket()函数创建的， 唯一标识一个socket. bind()函数就是将给这个描述字绑定一个名字。
    2) addr : 一个const struct sockaddr * 指针，指向要绑定给的sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是:
    struct sockaddr_in {
        sa_family_t    sin_family;      // address family : AF_INET
        in_port_t      sin_port;        // port in network byte order
        struct in_addr sin_addr;        // internet address
    }
    struct in_addr {
        uint32_t       s_addr;          // address in network byte order
    }