1.  模块结构体ngx_module_s
    该结构体在./src/core/ngx_conf_file.h中定义，ngx_module_t是它的别名(在./src/core/ngx_core.h中定义)。
    它是nginx的模块化架构最基本的数据结构。


    #define NGX_MODULE_V1          0, 0, 0, 0, 0, 0, 1            //使用这个值初始化模块前面7个字段的值
    #define NGX_MODULE_V1_PADDING  0, 0, 0, 0, 0, 0, 0, 0         //使用这个值初始化模块最后面的8个字段的值
    struct ngx_module_s {
        ngx_uint_t            ctx_index;             //分类模块计数器 
        ngx_uint_t            index;                 //模块计数器

        ngx_uint_t            spare0;                //替补0
        ngx_uint_t            spare1;                //替补1
        ngx_uint_t            spare2;
        ngx_uint_t            spare3;

        ngx_uint_t            version;               //版本

        void                 *ctx;                   //该模块的上下文，每个种类的模块有不同的上下文
        ngx_command_t        *commands;              //该模块的命令集，指向一个ngx_command_t结构数组
        ngx_uint_t            type;                  //该模块的种类，为core｜event｜http｜mail中的一种
        
        //以下是一些callback函数
        ngx_int_t           (*init_master)(ngx_log_t *log);          //初始化master

        ngx_int_t           (*init_module)(ngx_cycle_t *cycle);      //初始化模块

        ngx_int_t           (*init_process)(ngx_cycle_t *cycle);     //初始化工作进程
        ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);      //初始化线程
        void                (*exit_thread)(ngx_cycle_t *cycle);      //退出线程
        void                (*exit_process)(ngx_cycle_t *cycle);     //退出工作进程

        void                (*exit_master)(ngx_cycle_t *cycle);      //退出master

        uintptr_t             spare_hook0;                           //替补钩子0
        uintptr_t             spare_hook1;
        uintptr_t             spare_hook2;
        uintptr_t             spare_hook3;
        uintptr_t             spare_hook4;
        uintptr_t             spare_hook5;
        uintptr_t             spare_hook6;
        uintptr_t             spare_hook7;
    };
    下面是ngx_core_module_t结构体的定义
    typedef struct {
        ngx_str_t             name;
        void               *(*create_conf)(ngx_cycle_t *cycle);
        char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);
    } ngx_core_module_t;
    核心模块结构体包含一个名字字段和两个函数指针create_conf和init_conf
    
2.  ngx_cycle_s
    该结构体在./src/core/cycle.h中定义，ngx_cycle_t是它的别名(在./src/core/ngx_core.h中定义)。
    Nginx的大部分初始化工作主要围绕一个类型为ngx_cycle_t类型的全局变量(cycle)展开。
    struct ngx_cycle_s {
        void                  ****conf_ctx;          //配置上下文数组(含所有模块)
        ngx_pool_t               *pool;              //内存池

        ngx_log_t                *log;               //日志
        ngx_log_t                 new_log;           

        ngx_connection_t        **files;             //连接文件
        ngx_connection_t         *free_connections;  //空闲连接
        ngx_uint_t                free_connection_n; //空闲连接个数

        ngx_queue_t               reusable_connections_queue;   //再利用连接队列

        ngx_array_t               listening;                    //监听数组
        ngx_array_t               paths;                        //路径数组
        ngx_list_t                open_files;                   //打开文件链表
        ngx_list_t                shared_memory;                //共享内存链表

        ngx_uint_t                connection_n;                 //连接个数
        ngx_uint_t                files_n;                      //打开文件个数

        ngx_connection_t         *connections;                  //连接
        ngx_event_t              *read_events;                  //读事件
        ngx_event_t              *write_events;                 //写事件

        ngx_cycle_t              *old_cycle;                    //old cycle指针

        ngx_str_t                 conf_file;                    //配置文件
        ngx_str_t                 conf_param;                   //配置参数
        ngx_str_t                 conf_prefix;                  //配置前缀
        ngx_str_t                 prefix;                       //前缀
        ngx_str_t                 lock_file;                    //锁文件
        ngx_str_t                 hostname;                     //主机名
    };
    该结构体的大小是确定的，sizeof(ngx_cycle_t)=224。

3.  配置结构体ngx_conf_s
    该结构体在./src/core/ngx_conf_file.h中定义，ngx_conf_t是它的别名(在./src/core/ngx_core.h中定义)。
    struct ngx_conf_s {
        char                 *name;         //当前解析到的命令名
        ngx_array_t          *args;         //当前命令的所有参数

        ngx_cycle_t          *cycle;        //使用的cycle
        ngx_pool_t           *pool;         //所使用的内存池
        ngx_pool_t           *temp_pool;    //这个pool将会在配置解析完毕后释放。
        ngx_conf_file_t      *conf_file;    //这个表示将要解析的配置文件
        ngx_log_t            *log;          //配置log

        void                 *ctx;          //主要为了提供模块的层次化(后续会详细介绍)
        ngx_uint_t            module_type;  //模块类型
        ngx_uint_t            cmd_type;     //命令类型

        ngx_conf_handler_pt   handler;      //模块自定义的handler
        char                 *handler_conf; //自定义handler的conf
    };

4.  命令结构体ngx_command_s
    该结构体在./src/core/ngx_conf_file.h中定义，ngx_command_t是它的别名(在./src/core/ngx_core.h中定义)。
    struct ngx_command_s {
        ngx_str_t             name;                      //命令名称
        ngx_uint_t            type;                      //命令类型
        char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);     //执行该命令的函数
        ngx_uint_t            conf;                      //配置信息
        ngx_uint_t            offset;                    //偏移量
        void                 *post;                      //这个变量基本上都是NULL,
    };